#version 450 core

const float PI=3.1415926535;
const float TWO_PI=2*PI;
const float EPSILON=0.00001;

#define NUM_SAMPLES 64*1024
#define INV_NUM_SAMPLES 1.0/float(NUM_SAMPLES)

layout(set=0,binding=0) uniform samplerCube inputTexture;
layout(set=0,binding=1,rgba16f) writeonly uniform imageCube outputTexture;

// Compute Van der Corput radical inverse
// See: http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float RadicalInverse_VDC(uint bits)
{
    bits = (bits<<16u) | (bits>>16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

// Sample i-th point from Hammersley point set of NumSamples points total.
vec2 SampleHammersley(uint i)
{
    return vec2(i* INV_NUM_SAMPLES,RadicalInverse_VDC(i));
}

// Uniformly sample point on a hemisphere.
// Cosine-weighted sampling would be a better fit for Lambertian BRDF but since this
// compute shader runs only once as a pre-processing step performance is not *that* important.
// See: "Physically Based Rendering" 2nd ed., section 13.6.1.
vec3 SampleHemisphere(float u1,float u2)
{
    const float u1p=sqrt(max(0.0,1.0-u1*u1));
    return vec3(cos(TWO_PI*u2)*u1p,sin(TWO_PI*u2)*u1p,u1);
}

// Calculate normalized sampling direction vector based on current fragment coordinates (gl_GlobalInvocationID.xyz).
// This is essentially "inverse-sampling": we reconstruct what the sampling vector would be if we wanted it to "hit"
// this particular fragment in a cubemap.
// See: OpenGL core profile specs, section 8.13.
vec3 GetSamplingVector()
{
    vec2 st=gl_GlobalInvocationID.xy/vec2(imageSize(outputTexture));
    vec2 uv=2.0*vec2(st.x,1.0-st.y)-vec2(1.0);
   
    vec3 ret;

    if(gl_GlobalInvocationID.z==0)
        ret=vec3(1.0,uv.y,-uv.x);
    else if(gl_GlobalInvocationID.z==1)
        ret=vec3(-1.0,uv.y,uv.x);
    else if(gl_GlobalInvocationID.z==2)
        ret=vec3(uv.x,1.0,-uv.y);
    else if(gl_GlobalInvocationID.z==3)
        ret=vec3(uv.x,-1.0,uv.y);
    else if(gl_GlobalInvocationID.z==4)
        ret=vec3(uv.x,uv.y,1.0);
    else if(gl_GlobalInvocationID.z==5)
        ret=vec3(-uv.x,uv.y,-1.0);
    
    return normalize(ret);
}

// Compute orthonormal basis for converting from tanget/shading space to world space.
void ComputeBasisVectors(const vec3 N,out vec3 S,out vec3 T)
{
    T=cross(N,vec3(0.0,1.0,0.0));
    T=mix(cross(N,vec3(1.0,0.0,0.0)),T,step(EPSILON,dot(T,T)));
    T=normalize(T);
    S=normalize(cross(N,T));
}

// Convert point from tangent/shading space to world space.
vec3 TangentToWorld(const vec3 v,const vec3 N,const vec3 S,const vec3 T)
{
    return S * v.x + T * v.y + N * v.z;
}

layout(local_size_x=32,local_size_y=32,local_size_z=1) in;
void main()
{
    vec3 N=GetSamplingVector();

    vec3 S,T;
    ComputeBasisVectors(N,S,T);

    // Monte Carlo integration of hemispherical irradiance.
	// As a small optimization this also includes Lambertian BRDF assuming perfectly white surface (albedo of 1.0)
	// so we don't need to normalize in PBR fragment shader (so technically it encodes exitant radiance rather than irradiance).    

    vec3 irradiance=vec3(0);
    for(int i=0;i<NUM_SAMPLES;i++)
    {
        vec2 u = SampleHammersley(i);
        vec3 Li = TangentToWorld(SampleHemisphere(u.x,u.y),N,S,T);
        float cosTheta = max(0.0,dot(Li,N));

        irradiance += 2.0*textureLod(inputTexture,Li,0).rgb*cosTheta;
    }

    irradiance /= vec3(NUM_SAMPLES);

    imageStore(outputTexture,ivec3(gl_GlobalInvocationID),vec4(irradiance,1.0));
}