#version 450 core
#extension GL_ARB_separate_shader_objects:enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout(std140,set=0, binding=0) buffer buf
{
    vec4 imageData[];
};

layout(std140,set=0, binding=1) uniform Uniform
{
    uint width;
    uint height;
};


void main()
{
    if(gl_GlobalInvocationID.x>=width||gl_GlobalInvocationID.y>=height)
        return;

    vec2 uv=vec2(0,0);
    uv.x=float(gl_GlobalInvocationID.x)/float(width);
    uv.y=float(gl_GlobalInvocationID.y)/float(height);

    float n=0.0;
    vec2 c=vec2(-0.445,0.0)+(uv-0.5)*(2.0+1.7*0.2);
    vec2 z=vec2(0.0);
    const int M=128;
    for(int i=0;i<M;i++)
    {
        z=vec2(z.x*z.x-z.y*z.y,2.0*z.x*z.y)+c;
        if (dot(z,z)>2)
            break;
        ++n;
    }

    float t=float(n)/float(M);
    vec3 d=vec3(0.3,0.3,0.5);
    vec3 e=vec3(-0.2,-0.3,-0.5);
    vec3 f=vec3(2.1,2.0,3.0);
    vec3 g=vec3(0.0,0.1,0.0);
    vec4 color=vec4(d+e*cos(6.28318*(f*t+g)),1.0);

    imageData[width*gl_GlobalInvocationID.y+gl_GlobalInvocationID.x]=color;
}